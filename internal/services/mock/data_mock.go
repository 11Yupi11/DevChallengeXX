// Code generated by MockGen. DO NOT EDIT.
// Source: ./data.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	sql "database/sql"
	models "dev-challenge/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExcelLikeService is a mock of ExcelLikeService interface.
type MockExcelLikeService struct {
	ctrl     *gomock.Controller
	recorder *MockExcelLikeServiceMockRecorder
}

// MockExcelLikeServiceMockRecorder is the mock recorder for MockExcelLikeService.
type MockExcelLikeServiceMockRecorder struct {
	mock *MockExcelLikeService
}

// NewMockExcelLikeService creates a new mock instance.
func NewMockExcelLikeService(ctrl *gomock.Controller) *MockExcelLikeService {
	mock := &MockExcelLikeService{ctrl: ctrl}
	mock.recorder = &MockExcelLikeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExcelLikeService) EXPECT() *MockExcelLikeServiceMockRecorder {
	return m.recorder
}

// AddCellInput mocks base method.
func (m *MockExcelLikeService) AddCellInput(ctx context.Context, tx *sql.Tx, sheetID, cellID string, inputData *models.Data) (*models.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCellInput", ctx, tx, sheetID, cellID, inputData)
	ret0, _ := ret[0].(*models.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCellInput indicates an expected call of AddCellInput.
func (mr *MockExcelLikeServiceMockRecorder) AddCellInput(ctx, tx, sheetID, cellID, inputData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCellInput", reflect.TypeOf((*MockExcelLikeService)(nil).AddCellInput), ctx, tx, sheetID, cellID, inputData)
}

// AddCellInputTX mocks base method.
func (m *MockExcelLikeService) AddCellInputTX(ctx context.Context, sheetID, cellID string, inputData *models.Data) (*models.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCellInputTX", ctx, sheetID, cellID, inputData)
	ret0, _ := ret[0].(*models.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCellInputTX indicates an expected call of AddCellInputTX.
func (mr *MockExcelLikeServiceMockRecorder) AddCellInputTX(ctx, sheetID, cellID, inputData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCellInputTX", reflect.TypeOf((*MockExcelLikeService)(nil).AddCellInputTX), ctx, sheetID, cellID, inputData)
}

// GetCellInput mocks base method.
func (m *MockExcelLikeService) GetCellInput(ctx context.Context, sheetID, cellID string) (*models.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCellInput", ctx, sheetID, cellID)
	ret0, _ := ret[0].(*models.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCellInput indicates an expected call of GetCellInput.
func (mr *MockExcelLikeServiceMockRecorder) GetCellInput(ctx, sheetID, cellID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCellInput", reflect.TypeOf((*MockExcelLikeService)(nil).GetCellInput), ctx, sheetID, cellID)
}

// GetSheetInput mocks base method.
func (m *MockExcelLikeService) GetSheetInput(ctx context.Context, sheetID string) (map[string]models.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSheetInput", ctx, sheetID)
	ret0, _ := ret[0].(map[string]models.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSheetInput indicates an expected call of GetSheetInput.
func (mr *MockExcelLikeServiceMockRecorder) GetSheetInput(ctx, sheetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSheetInput", reflect.TypeOf((*MockExcelLikeService)(nil).GetSheetInput), ctx, sheetID)
}
